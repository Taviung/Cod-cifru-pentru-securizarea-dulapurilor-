<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.7.2" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.7.2(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="downloadBoard" val="BASYS3"/>
    <a name="downloadFrequency" val="1.0"/>
    <a name="simulationFrequency" val="4.0"/>
    <boardmap boardname="BASYS3">
      <mc key="/ADMIN" map="536,235"/>
      <mc key="/ADMIN_ON" map="649,295"/>
      <mc key="/Input_1" map="78,323"/>
      <mc key="/Input_2" map="117,323"/>
      <mc key="/Input_3" map="154,323"/>
      <mc key="/anod" pmap="273_234_0,225_234_0,180_234_0,130_234_0"/>
      <mc key="/catod" pmap="138_258_0,130_249_0,130_263_0,136_274_0,154_262_0,154_248_0,136_245_0"/>
      <mc key="/clk" map="321,237"/>
      <mc key="/confirm" map="487,236"/>
      <mc key="/locked" map="92,295"/>
    </boardmap>
    <boardmap boardname="NEXYS4_DDR_NOU">
      <mc key="/ADMIN" map="522,138"/>
      <mc key="/ADMIN_ON" map="107,271"/>
      <mc key="/Input_1" map="94,325"/>
      <mc key="/Input_2" map="128,325"/>
      <mc key="/Input_3" map="163,325"/>
      <mc key="/anod" pmap="289_200_0,248_200_0,208_200_0,160_200_0"/>
      <mc key="/catod" pmap="164_237_0,153_223_0,153_243_0,164_257_0,184_243_0,184_224_0,162_219_0"/>
      <mc key="/clk" map="298,144"/>
      <mc key="/confirm" map="477,138"/>
      <mc key="/locked" map="590,271"/>
    </boardmap>
    <comp lib="0" loc="(1200,440)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="anod"/>
      <a name="output" val="true"/>
      <a name="width" val="4"/>
    </comp>
    <comp lib="0" loc="(1200,460)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="catod"/>
      <a name="output" val="true"/>
      <a name="width" val="7"/>
    </comp>
    <comp lib="0" loc="(440,720)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_1"/>
    </comp>
    <comp lib="0" loc="(440,740)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_2"/>
    </comp>
    <comp lib="0" loc="(440,760)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_3"/>
    </comp>
    <comp lib="0" loc="(540,1140)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="clk"/>
    </comp>
    <comp lib="1" loc="(1220,930)" name="NOT Gate"/>
    <comp lib="2" loc="(1620,940)" name="Multiplexer">
      <a name="facing" val="south"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="5" loc="(1190,320)" name="LED">
      <a name="label" val="ADMIN_ON"/>
    </comp>
    <comp lib="5" loc="(1190,380)" name="LED">
      <a name="label" val="locked"/>
    </comp>
    <comp lib="5" loc="(370,700)" name="Button">
      <a name="facing" val="west"/>
      <a name="label" val="ADMIN"/>
    </comp>
    <comp lib="5" loc="(390,780)" name="Button">
      <a name="label" val="confirm"/>
    </comp>
    <comp loc="(1000,750)" name="NUMARATOR4">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="numarator4_1"/>
    </comp>
    <comp loc="(1000,850)" name="NUMARATOR4">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="numarator4_2"/>
    </comp>
    <comp loc="(1000,950)" name="NUMARATOR4">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="numarator4_3"/>
    </comp>
    <comp loc="(1200,440)" name="ssd16">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="ssd16_1"/>
    </comp>
    <comp loc="(1300,1140)" name="T_FF">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="t_ff_1"/>
    </comp>
    <comp loc="(1300,750)" name="concanator">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="concanator_2"/>
    </comp>
    <comp loc="(1550,520)" name="REG_ADMIN">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="reg_admin_1"/>
    </comp>
    <comp loc="(1590,750)" name="DMUX_2">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="dmux_2_1"/>
    </comp>
    <comp loc="(1590,850)" name="REG_MARE">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="reg_mare_1"/>
    </comp>
    <comp loc="(1590,950)" name="REG_MARE">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="reg_mare_2"/>
    </comp>
    <comp loc="(1670,1070)" name="COMPARTOR">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="compartor_1"/>
    </comp>
    <comp loc="(250,720)" name="DEB_3">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="deb_3_1"/>
    </comp>
    <comp loc="(480,1160)" name="DEB_3">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="deb_3_2"/>
    </comp>
    <comp loc="(670,700)" name="UC">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="uc_1"/>
    </comp>
    <comp loc="(680,590)" name="BIS_D">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="bis_d_1"/>
    </comp>
    <comp loc="(800,1140)" name="clk_div">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="clk_div_1"/>
    </comp>
    <comp loc="(970,650)" name="REG">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="reg_1"/>
    </comp>
    <wire from="(10,700)" to="(10,740)"/>
    <wire from="(10,700)" to="(370,700)"/>
    <wire from="(10,740)" to="(30,740)"/>
    <wire from="(1000,750)" to="(1080,750)"/>
    <wire from="(1000,850)" to="(1040,850)"/>
    <wire from="(1000,950)" to="(1070,950)"/>
    <wire from="(1040,770)" to="(1040,850)"/>
    <wire from="(1040,770)" to="(1080,770)"/>
    <wire from="(1050,1030)" to="(1050,1100)"/>
    <wire from="(1050,1030)" to="(1080,1030)"/>
    <wire from="(1070,1090)" to="(1070,1140)"/>
    <wire from="(1070,1140)" to="(1080,1140)"/>
    <wire from="(1070,790)" to="(1070,950)"/>
    <wire from="(1070,790)" to="(1080,790)"/>
    <wire from="(1080,1030)" to="(1320,1030)"/>
    <wire from="(1080,1160)" to="(1080,1200)"/>
    <wire from="(1080,1200)" to="(1690,1200)"/>
    <wire from="(1080,810)" to="(1080,1030)"/>
    <wire from="(1180,320)" to="(1180,340)"/>
    <wire from="(1180,320)" to="(1190,320)"/>
    <wire from="(1180,340)" to="(1750,340)"/>
    <wire from="(1180,380)" to="(1180,400)"/>
    <wire from="(1180,380)" to="(1190,380)"/>
    <wire from="(1180,400)" to="(1570,400)"/>
    <wire from="(1220,930)" to="(1280,930)"/>
    <wire from="(1280,870)" to="(1280,930)"/>
    <wire from="(1280,870)" to="(1370,870)"/>
    <wire from="(1280,930)" to="(1280,960)"/>
    <wire from="(1280,960)" to="(1360,960)"/>
    <wire from="(1300,1090)" to="(1300,1140)"/>
    <wire from="(1300,1090)" to="(1350,1090)"/>
    <wire from="(1300,1140)" to="(1310,1140)"/>
    <wire from="(1300,750)" to="(1310,750)"/>
    <wire from="(1300,830)" to="(1300,940)"/>
    <wire from="(1300,830)" to="(1610,830)"/>
    <wire from="(1300,940)" to="(1360,940)"/>
    <wire from="(1310,1140)" to="(1310,1190)"/>
    <wire from="(1310,1190)" to="(1750,1190)"/>
    <wire from="(1310,530)" to="(1310,750)"/>
    <wire from="(1310,750)" to="(1370,750)"/>
    <wire from="(1320,1030)" to="(1320,1130)"/>
    <wire from="(1320,1130)" to="(1450,1130)"/>
    <wire from="(1320,820)" to="(1320,850)"/>
    <wire from="(1320,820)" to="(1640,820)"/>
    <wire from="(1320,850)" to="(1370,850)"/>
    <wire from="(1320,890)" to="(1320,980)"/>
    <wire from="(1320,890)" to="(1370,890)"/>
    <wire from="(1320,980)" to="(1320,1030)"/>
    <wire from="(1320,980)" to="(1360,980)"/>
    <wire from="(1340,720)" to="(1340,770)"/>
    <wire from="(1340,720)" to="(1570,720)"/>
    <wire from="(1340,770)" to="(1370,770)"/>
    <wire from="(1350,930)" to="(1350,1090)"/>
    <wire from="(1350,930)" to="(1600,930)"/>
    <wire from="(1360,940)" to="(1360,950)"/>
    <wire from="(1360,950)" to="(1370,950)"/>
    <wire from="(1360,960)" to="(1360,970)"/>
    <wire from="(1360,970)" to="(1370,970)"/>
    <wire from="(1360,980)" to="(1360,990)"/>
    <wire from="(1360,990)" to="(1370,990)"/>
    <wire from="(1400,1050)" to="(1400,1090)"/>
    <wire from="(1400,1050)" to="(1620,1050)"/>
    <wire from="(1400,1090)" to="(1450,1090)"/>
    <wire from="(1430,1040)" to="(1430,1070)"/>
    <wire from="(1430,1040)" to="(1600,1040)"/>
    <wire from="(1430,1070)" to="(1450,1070)"/>
    <wire from="(1550,520)" to="(1560,520)"/>
    <wire from="(1560,520)" to="(1560,560)"/>
    <wire from="(1560,560)" to="(1630,560)"/>
    <wire from="(1570,400)" to="(1570,720)"/>
    <wire from="(1590,750)" to="(1640,750)"/>
    <wire from="(1590,770)" to="(1610,770)"/>
    <wire from="(1590,850)" to="(1600,850)"/>
    <wire from="(1590,950)" to="(1600,950)"/>
    <wire from="(1600,850)" to="(1600,860)"/>
    <wire from="(1600,860)" to="(1610,860)"/>
    <wire from="(1600,920)" to="(1600,930)"/>
    <wire from="(1600,950)" to="(1600,1040)"/>
    <wire from="(1610,770)" to="(1610,830)"/>
    <wire from="(1610,860)" to="(1610,910)"/>
    <wire from="(1620,940)" to="(1620,1050)"/>
    <wire from="(1630,560)" to="(1630,910)"/>
    <wire from="(1640,750)" to="(1640,820)"/>
    <wire from="(1670,1070)" to="(1690,1070)"/>
    <wire from="(1690,1070)" to="(1690,1200)"/>
    <wire from="(1690,1070)" to="(1710,1070)"/>
    <wire from="(1710,1010)" to="(1710,1070)"/>
    <wire from="(1710,1010)" to="(1740,1010)"/>
    <wire from="(1740,570)" to="(1740,1010)"/>
    <wire from="(1750,340)" to="(1750,1190)"/>
    <wire from="(20,720)" to="(20,810)"/>
    <wire from="(20,720)" to="(30,720)"/>
    <wire from="(20,810)" to="(270,810)"/>
    <wire from="(250,1100)" to="(250,1180)"/>
    <wire from="(250,1100)" to="(320,1100)"/>
    <wire from="(250,1180)" to="(260,1180)"/>
    <wire from="(250,720)" to="(300,720)"/>
    <wire from="(260,1110)" to="(260,1160)"/>
    <wire from="(260,1110)" to="(270,1110)"/>
    <wire from="(270,1110)" to="(380,1110)"/>
    <wire from="(270,590)" to="(270,810)"/>
    <wire from="(270,590)" to="(390,590)"/>
    <wire from="(270,810)" to="(270,1110)"/>
    <wire from="(300,1090)" to="(1070,1090)"/>
    <wire from="(300,680)" to="(300,720)"/>
    <wire from="(300,680)" to="(440,680)"/>
    <wire from="(300,720)" to="(300,1090)"/>
    <wire from="(320,800)" to="(320,1100)"/>
    <wire from="(320,800)" to="(400,800)"/>
    <wire from="(380,1010)" to="(380,1110)"/>
    <wire from="(380,1010)" to="(450,1010)"/>
    <wire from="(390,440)" to="(390,590)"/>
    <wire from="(390,440)" to="(980,440)"/>
    <wire from="(390,590)" to="(460,590)"/>
    <wire from="(390,780)" to="(400,780)"/>
    <wire from="(400,780)" to="(400,800)"/>
    <wire from="(440,1110)" to="(1450,1110)"/>
    <wire from="(440,680)" to="(440,700)"/>
    <wire from="(440,700)" to="(450,700)"/>
    <wire from="(440,720)" to="(450,720)"/>
    <wire from="(440,740)" to="(450,740)"/>
    <wire from="(440,760)" to="(450,760)"/>
    <wire from="(440,780)" to="(440,890)"/>
    <wire from="(440,780)" to="(450,780)"/>
    <wire from="(440,890)" to="(440,930)"/>
    <wire from="(440,890)" to="(480,890)"/>
    <wire from="(440,930)" to="(1190,930)"/>
    <wire from="(440,930)" to="(440,1110)"/>
    <wire from="(450,1010)" to="(450,1030)"/>
    <wire from="(450,1030)" to="(600,1030)"/>
    <wire from="(450,610)" to="(450,650)"/>
    <wire from="(450,610)" to="(460,610)"/>
    <wire from="(450,650)" to="(680,650)"/>
    <wire from="(450,800)" to="(450,1010)"/>
    <wire from="(480,890)" to="(480,1160)"/>
    <wire from="(540,1140)" to="(550,1140)"/>
    <wire from="(550,1100)" to="(550,1140)"/>
    <wire from="(550,1100)" to="(600,1100)"/>
    <wire from="(550,1140)" to="(580,1140)"/>
    <wire from="(600,1030)" to="(600,1100)"/>
    <wire from="(600,1100)" to="(740,1100)"/>
    <wire from="(670,700)" to="(680,700)"/>
    <wire from="(670,720)" to="(690,720)"/>
    <wire from="(670,740)" to="(720,740)"/>
    <wire from="(670,760)" to="(710,760)"/>
    <wire from="(680,590)" to="(710,590)"/>
    <wire from="(680,650)" to="(680,700)"/>
    <wire from="(680,700)" to="(700,700)"/>
    <wire from="(690,720)" to="(690,730)"/>
    <wire from="(690,730)" to="(730,730)"/>
    <wire from="(700,650)" to="(700,700)"/>
    <wire from="(700,650)" to="(720,650)"/>
    <wire from="(710,590)" to="(710,720)"/>
    <wire from="(710,720)" to="(770,720)"/>
    <wire from="(710,760)" to="(710,990)"/>
    <wire from="(710,990)" to="(780,990)"/>
    <wire from="(720,460)" to="(720,650)"/>
    <wire from="(720,460)" to="(980,460)"/>
    <wire from="(720,650)" to="(750,650)"/>
    <wire from="(720,740)" to="(720,890)"/>
    <wire from="(720,890)" to="(780,890)"/>
    <wire from="(730,730)" to="(730,790)"/>
    <wire from="(730,790)" to="(780,790)"/>
    <wire from="(740,1100)" to="(1050,1100)"/>
    <wire from="(740,570)" to="(1740,570)"/>
    <wire from="(740,570)" to="(740,670)"/>
    <wire from="(740,670)" to="(750,670)"/>
    <wire from="(740,690)" to="(740,1100)"/>
    <wire from="(740,690)" to="(750,690)"/>
    <wire from="(760,1060)" to="(800,1060)"/>
    <wire from="(760,750)" to="(760,850)"/>
    <wire from="(760,750)" to="(780,750)"/>
    <wire from="(760,850)" to="(760,950)"/>
    <wire from="(760,850)" to="(780,850)"/>
    <wire from="(760,950)" to="(760,1060)"/>
    <wire from="(760,950)" to="(780,950)"/>
    <wire from="(770,720)" to="(770,770)"/>
    <wire from="(770,770)" to="(770,870)"/>
    <wire from="(770,770)" to="(780,770)"/>
    <wire from="(770,870)" to="(770,970)"/>
    <wire from="(770,870)" to="(780,870)"/>
    <wire from="(770,970)" to="(780,970)"/>
    <wire from="(800,1060)" to="(800,1140)"/>
    <wire from="(960,480)" to="(960,530)"/>
    <wire from="(960,480)" to="(980,480)"/>
    <wire from="(960,530)" to="(1310,530)"/>
    <wire from="(970,650)" to="(980,650)"/>
    <wire from="(980,650)" to="(980,720)"/>
    <wire from="(980,720)" to="(1340,720)"/>
  </circuit>
  <vhdl name="REGISTRU">LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY REGISTRU IS&#13;
  PORT (&#13;
  	V_IN : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
  	CLK : IN STD_LOGIC;
  	V_OUT : OUT STD_LOGIC_VECTOR(3 DOWNTO 0)
    );&#13;
END REGISTRU;&#13;
&#13;
ARCHITECTURE TypeArchitecture OF REGISTRU IS&#13;
&#13;	SIGNAL V_INT : STD_LOGIC_VECTOR(3 DOWNTO 0);
BEGIN&#13;
	PROCESS(CLK)
	BEGIN
&#13;	IF RISING_EDGE(CLK) THEN 
		V_INT &lt;=  V_IN;
	END IF;  
&#13;	END PROCESS;
	V_OUT &lt;= V_INT;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="NUMARATOR2">LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
USE ieee.std_logic_unsigned.all;&#13;

ENTITY NUMARATOR2 IS&#13;
  PORT (&#13;
  	CLK, RST, EN : IN STD_LOGIC;
  	Q : OUT STD_LOGIC_VECTOR( 1 DOWNTO 0);
  	COUT : OUT STD_LOGIC
    );&#13;
END NUMARATOR2;&#13;

&#13;
ARCHITECTURE TypeArchitecture OF NUMARATOR2 IS&#13;

BEGIN&#13;
&#13;	PROCESS(CLK,RST,EN)
	VARIABLE NR: STD_LOGIC_VECTOR(1 DOWNTO 0):=(OTHERS =&gt; '0');
	BEGIN
		IF RST='1' THEN NR:=(OTHERS =&gt; '0');
		ELSIF RISING_EDGE( CLK ) THEN
			IF EN = '1' THEN 
			 	NR:= NR+1;
			END IF;
		END IF;
		Q &lt;= NR;
		IF NR = "11" THEN
		COUT &lt;= '1';
		ELSE COUT &lt;= '0';
		END IF;
	END PROCESS;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="DMUX1_4">library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity DMUX1_4 is
 port(
 		out0, out1, out2, out3:out std_logic_vector(3 downto 0);
       intr:in std_logic_vector(3 downto 0);
       sel:in std_logic_vector(1 downto 0)
       );
end DMUX1_4;

architecture Behavioral of DMUX1_4 is

begin
	process(intr,sel)
    begin
    if(sel="00")then out0&lt;=intr; --out1 &lt;= "0000"; out2 &lt;= "0000"; out3 &lt;= "0000";
    elsif(sel="01")then out1&lt;=intr; --out0&lt;= "0000"; out2 &lt;= "0000"; out3 &lt;= "0000";
    elsif(sel="10")then out2&lt;=intr; --out0 &lt;= "0000"; out1 &lt;= "0000"; out3 &lt;= "0000";
    elsif(sel="11")then out3&lt;=intr; --out0 &lt;= "0000"; out1 &lt;= "0000"; out2 &lt;= "0000";
  end if;    
    end process;
end Behavioral;</vhdl>
  <vhdl name="COMPARTOR">
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;USE ieee.std_logic_unsigned.all;

ENTITY COMPARTOR IS&#13;
  PORT (&#13;
	IN1, IN2 : IN STD_LOGIC_VECTOR( 15 DOWNTO 0);
	EN : IN STD_LOGIC;
	CLK : IN STD_LOGIC;
	EG : OUT STD_LOGIC
    );&#13;
END COMPARTOR;&#13;
&#13;
&#13;
ARCHITECTURE TypeArchitecture OF COMPARTOR IS&#13;
&#13;
BEGIN&#13;
&#13;	PROCESS(EN,CLK)
	BEGIN 
	IF RISING_EDGE( CLK) THEN
	IF EN = '1' THEN 
		IF IN1 = IN2 THEN
			EG &lt;= '1';
			END IF;
		ELSE EG &lt;='0';
	END IF;
	END IF;	
	END PROCESS;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="PmodKYPD">----------------------------------------------------------------------------------
-- Company: Digilent Inc 2011
-- Engineer: Michelle Yu  
-- Create Date:    17:05:39 08/23/2011 
--
-- Module Name:    PmodKYPD - Behavioral 
-- Project Name:  PmodKYPD
-- Target Devices: Nexys3
-- Tool versions: Xilinx ISE 13.2 
-- Description: 
--	This file defines a project that outputs the key pressed on the PmodKYPD to the seven segment display
--
-- Revision: 
-- Revision 0.01 - File Created
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity PmodKYPD is
    Port ( 
			  clk : in  STD_LOGIC;
			  JA : inout  STD_LOGIC_VECTOR (7 downto 0); -- PmodKYPD is designed to be connected to JA
         data: out std_logic_vector(3 downto 0));
end PmodKYPD;

architecture Behavioral of PmodKYPD is

component Decoder is
	Port (
			 clk : in  STD_LOGIC;
          Row : in  STD_LOGIC_VECTOR (3 downto 0);
			 Col : out  STD_LOGIC_VECTOR (3 downto 0);
          DecodeOut : out  STD_LOGIC_VECTOR (3 downto 0));
	end component;
signal Decode: STD_LOGIC_VECTOR (3 downto 0);
begin

	
	C0: Decoder port map (clk=&gt;clk, Row =&gt;JA(7 downto 4), Col=&gt;JA(3 downto 0), DecodeOut=&gt; data);


end Behavioral;

----------------------------------------------------------------------------------
-- Company: Digilent Inc 2011
-- Engineer: Michelle Yu  
-- Create Date:      17:18:24 08/23/2011 
--
-- Module Name:    Decoder - Behavioral 
-- Project Name:  PmodKYPD
-- Target Devices: Nexys3
-- Tool versions: Xilinx ISE 13.2
-- Description: 
--	This file defines a component Decoder for the demo project PmodKYPD. 
-- The Decoder scans each column by asserting a low to the pin corresponding to the column 
-- at 1KHz. After a column is asserted low, each row pin is checked. 
-- When a row pin is detected to be low, the key that was pressed could be determined.
--
-- Revision: 
-- Revision 0.01 - File Created
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity Decoder is
    Port (
			  clk : in  STD_LOGIC;
          Row : in  STD_LOGIC_VECTOR (3 downto 0);
			 Col : out  STD_LOGIC_VECTOR (3 downto 0);
          DecodeOut : out  STD_LOGIC_VECTOR (3 downto 0));
end Decoder;

architecture Behavioral of Decoder is

signal sclk :STD_LOGIC_VECTOR(19 downto 0);
begin
	process(clk)
		begin 
		if clk'event and clk = '1' then
			-- 1ms
			if sclk = "00011000011010100000" then 
				--C1
				Col&lt;= "0111";
				sclk &lt;= sclk+1;			-- check row pins
			elsif sclk = "00011000011010101000" then	
				--R1
				if Row = "0111" then
					DecodeOut &lt;= "0001";	--1
				--R2
				elsif Row = "1011" then
					DecodeOut &lt;= "0100"; --4
				--R3
				elsif Row = "1101" then
					DecodeOut &lt;= "0111"; --7
				--R4
				elsif Row = "1110" then
					DecodeOut &lt;= "0000"; --0
				end if;
				sclk &lt;= sclk+1;
			-- 2ms
			elsif sclk = "00110000110101000000" then	
				--C2
				Col&lt;= "1011";
				sclk &lt;= sclk+1;
			-- check row pins
			elsif sclk = "00110000110101001000" then	
				--R1
				if Row = "0111" then		
					DecodeOut &lt;= "0010"; --2
				--R2
				elsif Row = "1011" then
					DecodeOut &lt;= "0101"; --5
				--R3
				elsif Row = "1101" then
					DecodeOut &lt;= "1000"; --8
				--R4
				elsif Row = "1110" then
					DecodeOut &lt;= "1111"; --F
				end if;
				sclk &lt;= sclk+1;	
			--3ms
			elsif sclk = "01001001001111100000" then 
				--C3
				Col&lt;= "1101";
				sclk &lt;= sclk+1;
			-- check row pins
			elsif sclk = "01001001001111101000" then 
				--R1
				if Row = "0111" then
					DecodeOut &lt;= "0011"; --3	
				--R2
				elsif Row = "1011" then
					DecodeOut &lt;= "0110"; --6
				--R3
				elsif Row = "1101" then
					DecodeOut &lt;= "1001"; --9
				--R4
				elsif Row = "1110" then
					DecodeOut &lt;= "1110"; --E
				end if;
				sclk &lt;= sclk+1;
			--4ms
			elsif sclk = "01100001101010000000" then 			
				--C4
				Col&lt;= "1110";
				sclk &lt;= sclk+1;
			-- check row pins
			elsif sclk = "01100001101010001000" then 
				--R1
				if Row = "0111" then
					DecodeOut &lt;= "1010"; --A
				--R2
				elsif Row = "1011" then
					DecodeOut &lt;= "1011"; --B
				--R3
				elsif Row = "1101" then
					DecodeOut &lt;= "1100"; --C
				--R4
				elsif Row = "1110" then
					DecodeOut &lt;= "1101"; --D
				end if;
				sclk &lt;= "00000000000000000000";	
			else
				sclk &lt;= sclk+1;	
			end if;
		end if;
	end process;
		
		
						 
end Behavioral;</vhdl>
  <vhdl name="concanator">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY concanator IS&#13;
  PORT (&#13;
 REG1:IN STD_LOGIC_VECTOR(3 DOWNTO 0);
 REG2: IN STD_LOGIC_VECTOR(3 DOWNTO 0);
 REG3:IN STD_LOGIC_VECTOR(3 DOWNTO 0);
 CLK : IN STD_LOGIC;
 OUTPUT_REG:OUT STD_LOGIC_VECTOR(15 DOWNTO 0)
    );&#13;
END concanator;&#13;
&#13;
ARCHITECTURE TypeArchitecture OF concanator IS&#13;
&#13;
BEGIN&#13;
	PROCESS(CLK)
	BEGIN
	IF RISING_EDGE( CLK) THEN
&#13;	OUTPUT_REG&lt;="0000" &amp; REG1 &amp; REG2 &amp; REG3;
	END IF;
	END PROCESS;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="NUMARATOR4">LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;

ENTITY NUMARATOR4 IS
  PORT (
  	CLK, RST, EN : IN STD_LOGIC;
  	Q : OUT STD_LOGIC_VECTOR( 3 DOWNTO 0)
    );
END NUMARATOR4;


ARCHITECTURE TypeArchitecture OF NUMARATOR4 IS

BEGIN

	PROCESS(CLK,RST,EN)
	VARIABLE NR: STD_LOGIC_VECTOR(3 DOWNTO 0):=(OTHERS =&gt; '0');
	BEGIN
		IF RST='1' THEN NR:=(OTHERS =&gt; '0');
		ELSIF RISING_EDGE( CLK ) THEN
			IF EN = '1' THEN 
			 	NR:= NR+1;
			END IF;
		END IF;
		Q &lt;= NR;
	END PROCESS;

END TypeArchitecture;
</vhdl>
  <vhdl name="REG_MARE">LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY REG_MARE IS
  PORT (
  	V_IN : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
  	EN : IN STD_LOGIC;
  	CLK : IN STD_LOGIC;
  	V_OUT : OUT STD_LOGIC_VECTOR(15 DOWNTO 0)
    );
END REG_MARE;

ARCHITECTURE TypeArchitecture OF REG_MARE IS

	SIGNAL V_INT : STD_LOGIC_VECTOR(15 DOWNTO 0);
BEGIN
	PROCESS(CLK)
	BEGIN
	IF RISING_EDGE(CLK) THEN 
		IF EN = '1' THEN
		V_INT &lt;=  V_IN;
		END IF;
	END IF;  

	END PROCESS;
	V_OUT &lt;= V_INT;
END TypeArchitecture;
</vhdl>
  <vhdl name="DMUX_2">library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity DMUX_2 is
 port(
 		out0, out1:out std_logic_vector(15 downto 0);
       intr:in std_logic_vector(15 downto 0);
       sel:in std_logic
       );
end DMUX_2;

architecture Behavioral of DMUX_2 is

begin
	process(intr,sel)
    begin
    if(sel='0')then out0&lt;=intr; --out1 &lt;= "0000"; out2 &lt;= "0000"; out3 &lt;= "0000";
    elsif(sel='1')then out1&lt;=intr; --out0&lt;= "0000"; out2 &lt;= "0000"; out3 &lt;= "0000";
  end if;    
    end process;
end Behavioral;</vhdl>
  <vhdl name="UC">
LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY UC IS
  PORT (
  	ADMIN : IN STD_LOGIC;
	CIF1, CIF2, CIF3 : IN STD_LOGIC;
	CONFIRM : IN STD_LOGIC;
	CLK :IN STD_LOGIC;
	SEL: OUT STD_LOGIC;
	EN1, EN2, EN3: OUT STD_LOGIC
    );
END UC;

ARCHITECTURE TypeArchitecture OF UC IS

BEGIN
	PROCESS(CIF1, CIF2, CIF3, CONFIRM,CLK)
	BEGIN
		IF RISING_EDGE(CLK) THEN
		IF ADMIN = '1' THEN
			SEL &lt;= '1';
		ELSIF CONFIRM = '1' THEN 
		SEL &lt;= '1';
		ELSE SEL &lt;= '0';
		END IF;
		IF CIF1 = '1' THEN 
			EN1 &lt;= '1';
		ELSIF CIF2 = '1' THEN
			EN2 &lt;= '1';
		ELSIF CIF3 = '1' THEN
			EN3 &lt;= '1';
		ELSE EN1&lt;='0'; EN2&lt;='0'; EN3&lt;='0';
		END IF;
		END IF; 	
	END PROCESS;	

END TypeArchitecture;
</vhdl>
  <vhdl name="T_FF">library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
 
entity T_FF is
port( T: in std_logic;
RST : IN STD_LOGIC;
Q: out std_logic);
end T_FF;
 
architecture Behavioral of T_FF is
signal tmp: std_logic := '0';
begin
process (T,RST)
begin
IF RST = '1' THEN
tmp &lt;= '0';
elsif T='0' then
tmp &lt;= tmp;
elsif T='1' then
tmp &lt;= not (tmp);
end if;
end process;
Q &lt;= tmp;
end Behavioral;
</vhdl>
  <vhdl name="REG">LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY REG IS
  PORT (
  	V_IN : IN STD_LOGIC;
  	RST : IN STD_LOGIC;
  	CLK : IN STD_LOGIC;
  	V_OUT : OUT STD_LOGIC
    );
END REG;

ARCHITECTURE TypeArchitecture OF REG IS

	SIGNAL V_INT : STD_LOGIC := '0';
BEGIN
	PROCESS(V_IN,CLK)
	BEGIN
	IF RST = '1' THEN
		V_INT &lt;= '0';
	ELSIF RISING_EDGE( CLK) THEN
		IF V_IN = '1' THEN 
		V_INT &lt;=  V_IN;
	END IF;  
	END IF;
	END PROCESS;
	V_OUT &lt;= V_INT;
END TypeArchitecture;
</vhdl>
  <vhdl name="DEB_3">LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;

ENTITY DEB_3 IS
  PORT (
  CLK,B: IN STD_LOGIC;
	Y: OUT STD_LOGIC);
END DEB_3;

ARCHITECTURE STRUCT OF DEB_3 IS
COMPONENT BIS_D IS
  PORT (
CLK,D: IN STD_LOGIC;
  	Q: OUT STD_LOGIC);
END COMPONENT;
SIGNAL N1,N2: STD_LOGIC := '0';
BEGIN
C1: BIS_D PORT MAP (CLK,B,N1);
C2: BIS_D PORT MAP (CLK,N1,N2);
Y&lt;= N1 AND N2;
END STRUCT;



LIBRARY ieee;
USE ieee.std_logic_1164.all;

USE ieee.std_logic_unsigned.all;

ENTITY BIS_D IS
  PORT (
CLK,D: IN STD_LOGIC;
  	Q: OUT STD_LOGIC);
END BIS_D;

ARCHITECTURE COMP OF BIS_D IS
BEGIN
PROCESS(CLK)
BEGIN
IF RISING_EDGE(CLK) THEN
	 Q&lt;=D;
END IF;
END PROCESS;
END COMP;
</vhdl>
  <vhdl name="REG_ADMIN">LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY REG_ADMIN IS
  PORT (
  	V_OUT : OUT STD_LOGIC_VECTOR(15 DOWNTO 0)
    );
END REG_ADMIN;

ARCHITECTURE TypeArchitecture OF REG_ADMIN IS

BEGIN
	
	V_OUT &lt;= "0000001100000001";
END TypeArchitecture;
</vhdl>
  <vhdl name="BIS_D">LIBRARY ieee;
USE ieee.std_logic_1164.all;

USE ieee.std_logic_unsigned.all;

ENTITY BIS_D IS
  PORT (
CLK,D: IN STD_LOGIC;
  	Q: OUT STD_LOGIC);
END BIS_D;

ARCHITECTURE COMP OF BIS_D IS
BEGIN
PROCESS(CLK)
BEGIN
IF RISING_EDGE(CLK) THEN
	 Q&lt;=D;
END IF;
END PROCESS;
END COMP;</vhdl>
  <vhdl name="ssd">library ieee;
use ieee.std_logic_1164.all;

entity ssd is
Port ( B0,B1,B2,B3 : in STD_LOGIC;
A,B,C,D,E,F,G : out STD_LOGIC);
end ssd;
 
architecture Behavioral of ssd is
 SIGNAL AS,BS,CS,DS,ES,FS,GS : STD_LOGIC := '0';
begin
 
AS &lt;= B0 OR B2 OR (B1 AND B3) OR (NOT B1 AND NOT B3);
BS &lt;= (NOT B1) OR (NOT B2 AND NOT B3) OR (B2 AND B3);
CS &lt;= B1 OR NOT B2 OR B3;
DS &lt;= (NOT B1 AND NOT B3) OR (B2 AND NOT B3) OR (B1 AND NOT B2 AND B3) OR (NOT B1 AND B2) OR B0;
ES &lt;= (NOT B1 AND NOT B3) OR (B2 AND NOT B3);
FS &lt;= B0 OR (NOT B2 AND NOT B3) OR (B1 AND NOT B2) OR (B1 AND NOT B3);
GS &lt;= B0 OR (B1 AND NOT B2) OR ( NOT B1 AND B2) OR (B2 AND NOT B3);
A&lt;=AS;
B&lt;=BS;
C&lt;=CS;
D&lt;=DS;
E&lt;=ES;
F&lt;=FS;
G&lt;=GS;
end architecture;</vhdl>
  <vhdl name="ssd16"> library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.std_logic_unsigned.all;
entity ssd16 is
    Port ( clock_100Mhz : in STD_LOGIC;
           reset : in STD_LOGIC; 
           data: in std_logic_vector(15 downto 0);
           Anode_Activate : out STD_LOGIC_VECTOR (3 downto 0);
           LED_out : out STD_LOGIC_VECTOR (6 downto 0));
end ssd16;

architecture Behavioral of ssd16 is
signal one_second_counter: STD_LOGIC_VECTOR (27 downto 0);
signal one_second_enable: std_logic;
signal displayed_number: STD_LOGIC_VECTOR (15 downto 0);
signal LED_BCD: STD_LOGIC_VECTOR (3 downto 0);
signal refresh_counter: STD_LOGIC_VECTOR (19 downto 0);
signal LED_activating_counter: std_logic_vector(1 downto 0);

begin

process(LED_BCD)
begin
    case LED_BCD is
    when "0000" =&gt; LED_out &lt;=	not "0000001"; -- "0"     
    when "0001" =&gt; LED_out &lt;= not "1001111"; -- "1" 
    when "0010" =&gt; LED_out &lt;= not "0010010"; -- "2" 
    when "0011" =&gt; LED_out &lt;= not "0000110"; -- "3" 
    when "0100" =&gt; LED_out &lt;= not "1001100"; -- "4" 
    when "0101" =&gt; LED_out &lt;= not "0100100"; -- "5" 
    when "0110" =&gt; LED_out &lt;= not "0100000"; -- "6" 
    when "0111" =&gt; LED_out &lt;= not "0001111"; -- "7" 
    when "1000" =&gt; LED_out &lt;= not "0000000"; -- "8"     
    when "1001" =&gt; LED_out &lt;= not "0000100"; -- "9" 
    when "1010" =&gt; LED_out &lt;= not "0000010"; -- a
    when "1011" =&gt; LED_out &lt;= not "1100000"; -- b
    when "1100" =&gt; LED_out &lt;= not "0110001"; -- C
    when "1101" =&gt; LED_out &lt;= not "1000010"; -- d
    when "1110" =&gt; LED_out &lt;= not "0110000"; -- E
    when "1111" =&gt; LED_out &lt;= not "0111000"; -- F
    when others=&gt; LED_out&lt;= not"0000000";
    end case;
end process;

process(clock_100Mhz,reset)
begin 
    if(reset='1') then
        refresh_counter &lt;= (others =&gt; '0');
    elsif(rising_edge(clock_100Mhz)) then
        refresh_counter &lt;= refresh_counter + 1;
    end if;
end process;
 LED_activating_counter &lt;= refresh_counter(19 downto 18);

process(LED_activating_counter)
begin
    case LED_activating_counter is
    when "00" =&gt;
        Anode_Activate &lt;= not "0111"; 
     
        LED_BCD &lt;= displayed_number(15 downto 12);
        
    when "01" =&gt;
        Anode_Activate &lt;= not "1011"; 
       
        LED_BCD &lt;= displayed_number(11 downto 8);
        
    when "10" =&gt;
        Anode_Activate &lt;= not "1101"; 
     
        LED_BCD &lt;= displayed_number(7 downto 4);
        
    when "11" =&gt;
        Anode_Activate &lt;=not  "1110"; 
    
        LED_BCD &lt;= displayed_number(3 downto 0);
       
        when others=&gt;
        Anode_Activate &lt;=not  "0000"; 
        
        LED_BCD &lt;= not "0000";
       
            
    end case;
end process;
one_second_enable &lt;= '1' ;
process(clock_100Mhz, reset)
begin
        if(reset='1') then
            displayed_number &lt;= (others =&gt; '0');
        elsif(rising_edge(clock_100Mhz)) then
             if(one_second_enable='1') then
                displayed_number &lt;= data ;
             end if;
        end if;
end process;
end Behavioral;</vhdl>
  <vhdl name="clk_div">--------------------------------------------------------------------------------
-- Project :
-- File    :
-- Autor   :
-- Date    :
--
--------------------------------------------------------------------------------
-- Description :
--
--------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY clk_div IS
  PORT (
clk:in std_logic;
  clk_out:out std_logic
  
    );
END clk_div;



ARCHITECTURE TypeArchitecture OF clk_div IS

signal counter:integer:=1;
signal tmp:std_logic:='0';

BEGIN

	process(clk)
begin
if rising_edge(clk) then
counter&lt;=counter+1;
if counter=50000000 then
tmp&lt;=not tmp;
counter&lt;=1;
end if;
end if;
clk_out&lt;=tmp;
end process;

	

END TypeArchitecture;
</vhdl>
</project>
